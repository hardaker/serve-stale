<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-tale-dnsop-serve-stale-00" category="std">

  <front>
    <title abbrev="DNS Serve Stale">Serving Stale Data to Improve DNS Resiliency</title>

    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>
    <author initials="W." surname="Kumari" fullname="Warren Kumari">
      <organization>Google</organization>
      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>
          <city>Mountain View</city>
          <code>CA 94043</code>
          <country>USA</country>
        </postal>
        <email>warren@kumari.net</email>
      </address>
    </author>

    <date year="2017" month="March"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This draft defines a method for recursive resolvers to use stale DNS
data to avoid outages when authoritative nameservers cannot be reached
to refresh expired data.</t>



    </abstract>


    <note title="Ed note">


<t>Text inside square brackets ([]) is additional background
information, answers to frequently asked questions, general musings,
etc.  They will be removed before publication.  This document is being
collaborated on in GitHub at
&lt;https://github.com/vttale/serve-stale&gt;.  The most recent
version of the document, open issues, etc should all be available
here.  The authors gratefully accept pull requests.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Traditionally the Time To Live (TTL) of a DNS resource record has been
understood to represent the maximum number of seconds that a record
can be used before it must be discarded, based on its description and
usage in <xref target="RFC1035"/> and clarifications in <xref target="RFC2181"/>.
Specifically, <xref target="RFC1035"/> Section 3.2.1 says that it "specifies the
time interval that the resource record may be cached before the source
of the information should again be consulted".</t>

<t>Notably, the original DNS specification does not say that data past
its expiration cannot be used.  This document proposes a method for
how recursive resolvers should handle stale DNS data to balance the
competing needs of resiliency and freshness. It is predicated on the
observation that authoritative server unavailability can cause outages
even when the underlying data those servers would return is typically
unchanged.</t>

<t>There are a number of reasons why an authoritative server may become
unreachable, including Denial of Service (DoS) attacks, network
issues, and so on.  This document suggests that, if the recursive
server is unable to contact the authoritative server but still has
data for the query name, it essentially extends the TTL of the
existing data on the assumption that "stale bread is better than no
bread".</t>

<t>Several major recursive resolver operations currently use stale data
for answers in some way, including Akamai, OpenDNS, and Xerocole.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>For a comprehensive treatment of DNS terms, please see <xref target="RFC7719"/>.</t>

</section>
<section anchor="description" title="Description">

<t>Three notable timers drive considerations for the use of stale data,
as follows:</t>

<t><list style="symbols">
  <t>A client response timer, which is the maximum amount of time a
recursive resolver should allow between the receipt of a resolution
request and sending its response.</t>
  <t>A query resolution timer, which caps the total amount of time a
recursive resolver spends processing the query.</t>
  <t>A maximum stale timer, which caps the amount of time
that records will be kept past their expiration.</t>
</list></t>

<t>Recursive resolvers already have the second timer; the first and
third timers are new concepts for this mechanism.</t>

<t>When a request is received by the recursive resolver, it SHOULD start
the client response timer.  This timer is used to avoid client
timeouts.  It SHOULD be configurable, with a recommended value of 1.8
seconds.</t>

<t>The resolver then checks its cache for an unexpired answer. If it
finds none and the Recursion Desired flag is not set in the request,
it SHOULD immediately return the response without consulting the
cache for expired records.</t>

<t>If iterative lookups will be done, it SHOULD start the query
resolution timer.  This timer bounds the work done by the resolver,
and is commonly around 10 to 30 seconds. [ BIND 9 used to use a
hard-coded constant of 30 seconds and has more recently added a
configuration parameter that defaults to 10 seconds and is capped at
30. A rigorous exploration of other implementations has not yet been
done. ]</t>

<t>If the answer has not been completely determined by the time the
client response timer has elapsed, the resolver SHOULD then check its
cache to see whether there is expired data that would satisfy the
request.  If so, it adds that data to the response message and SHOULD
set the TTL of each expired record in the message to 1 second.  The
response is then sent to the client while the resolver continues its
attempt to refresh the data.  1 second was chosen because historically
0 second TTLs have been problematic for some implementations.  It not
only sidesteps those potential problems with no practical negative
consequence, it would also rate limit further queries from any client
that is honoring the TTL, such as a forwarding resolver.</t>

<t>The maximum stale timer is used for cache management and is
independent of the query resolution process. This timer is
conceptually different from the maximum cache TTL that exists in many
resolvers, the latter being a clamp on the value of TTLs as received
from authoritative servers.  The maximum stale timer SHOULD be
configurable, and defines the length of time after a record expires
that it SHOULD be retained in the cache.  The suggested value is 7
days, which gives time to notice the resolution problem and for human
intervention for fixing it.</t>

<t>This same basic technique MAY be used to handle stale data associated
with delegations.  If authoritative server addresses are not able to
be refreshed, resolution can possibly still be successful if the
authoritative servers themselves are still up.</t>

</section>
<section anchor="implementation-caveats" title="Implementation Caveats">

<t>Answers from authoritative servers that have a DNS Response Code of
either 0 (NOERROR) or 3 (NXDOMAIN) MUST be considered to have
refreshed the data at the resolver.  In particular, this means that
this method is not meant to protect against operator error at the
authoritative server that turns a name that is intended to be valid
into one that is non-existent, because there is no way for a resolver
to know intent.</t>

<t>Resolution is given a chance to succeed before stale data is used to
adhere to the original intent of the design of the DNS.  This
mechanism is only intended to add robustness to failures, and to be
enabled all the time.  If stale data were used immediately and then a
cache refresh attempted after the client response has been sent, the
resolver would frequently be sending data that it would have had no
trouble refreshing.</t>

<t>It is important to continue the resolution attempt after the stale
response has been sent, until the query resolution timeout, because
some pathological resolutions can take many seconds to succeed as they
cope with unavailable servers, bad networks, and other problems.
Stopping the resolution attempt when the response with expired data
has been sent would mean that answers in these pathological cases
would never be refreshed.</t>

<t>Canonical Name (CNAME) records mingled in the expired cache with other
records at the same owner name can cause surprising results.  This was
observed with an initial implementation in BIND, where a hostname
changed from having a CNAME record to an IPv4 Address (A) record.
BIND does not evict CNAMEs in the cache when other types are received,
which in normal operations is not an issue.  However, after both
records expired and the authorities became unavailable, the fallback
to stale answers returned the older CNAME instead of the newer A.</t>

<t>[ This probably applies to other occluding types, so more thought
should be given to the overall issue. It should probably also be
rewritten to not suggest that this only a quirk of BIND. ]</t>

<t>Keeping records around after their normal expiration will of course
cause caches to grow larger than if records were removed at their TTL.
Specific guidance on managing cache sizes is outside the scope of this
document.  Some areas for consideration include whether to track the
popularity of names in client requests versus evicting by maximum age,
and whether to provide a feature for manually flushing only stale
records.</t>

</section>
<section anchor="implementation-status" title="Implementation Status">

<t>[RFC Editor: per RFC 6982 this section should be removed prior to
publication.]</t>

<t>The algorithm described in this draft was originally implemented as a
patch to BIND 9.7.0.  It has been in production on Akamai's production
network since 2011, and effectively smoothed over transient failures
and longer outages that would have resulted in major incidents. The
patch has been contributed to the Internet Systems Consortium in
anticipation that it will be incorporated to their main BIND
distribution.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>The most obvious security issue is the increased likelihood of DNSSEC
validation failures when using stale data because signatures could be
returned outside their validity period.  This would only be an issue
if the authoritative servers are unreachable, the only time the
techniques in this document are used, and thus does not introduce
a new failure in place of what would have otherwise been success.</t>

<t>Additionally, bad actors have been known to use DNS caches to keep
records alive even after their authorities have gone away.  This makes
that easier.</t>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>This document does not add any practical new privacy issues.</t>

</section>
<section anchor="nat-considerations" title="NAT Considerations">

<t>The method described here is not affected by the use of NAT devices.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document contains no actions for IANA.  This section will be
removed during conversion into an RFC by the RFC editor.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors wish to thank Matti Klock, Mukund Sivaraman, Jean Roy, and
Jason Moreau for initial review.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC2181;
&RFC2119;


    </references>

    <references title='Informative References'>

&RFC7719;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAIp8UlkAA41aXXccN3J9x69A5IdIOcMxKckri8lJlkvJNtciqZB0vDmr
PXsw3ZgZhP21DTRHkz3+77m3AHT3yOMkD7bImW6gUHXr1q0CT05OVHChsuf6
3vZPrtno+2Aqq9+ZYHRo9VXd9e0Tfr+513fWu8rZptgrs1r19ulcPuaLNr6m
yrZoTI3Vyt6swwk/Oykb33Ynnk+dePnk9FSVJuCpl6dnb05OXynluv5ch37w
4eXp6dvTl8r01pzrqybYvrFB7Tay1+1H/XPbP9LM7/t26NTjbnro5B33VIUJ
59qHUqmiLfHkuR78ifGFc6pz50rrE5yrkH/9vu7t2sef2z7IL8oMYdv28iT+
09o1HpsvL5f6g9n1OL6Vj+M535knV+rLw6/aHrtePJraOP1gi23TVu3GWS9f
emxjYeLZN6f6D31ryp3ZyxeFC/tzfWnqVe/KTVwJR8Am1xf69OXZ65cnZ6ff
vE6fD03o8fhP9xfygcVeFVwI9/7eyM7Loq3V4SF+Xuofh9r0bnaAn00Pw+ef
i/Xft+2msocG/+70VF/U3daFrTX4UH80/eOh9de0y7hG/4ezu9kJLi/029en
r1/9r8bvxJTfP4opS4ZdnZycaLOCBabAbw9b5yOydGnXrrFeG11bhKvU67bX
vS2G3jugsbe+rZ5s74nhwVvtI6pv7ok8QbZ5ahG5dghmg3V2WzghRt4FE7gG
/SOoxSqFaZo26BVXNsXWlgorAC7YZ6vt5871ttRceRltxsP2r+/Lv/Jf2G0/
B0bAlTDkbwOwrVc40aMNXj//9OdPf3mhcTBTli64tjGVXuHLDQDelMo1OFlt
+MVCm8bv0qGw9d8G24Rqr41/xO74zfMpv9Ab29gey9SDRwL4hbKhWGr9sLV7
vXNVFc9RI69L/Ij1re6GVeUK2UaepKPbYqixA21bWSyEhKoqs2p75C481+BI
+nsXfhhW2gT16V+2IXT+/OuvNwDIsCL+vn4K9PvXs+T/9K/REl23PjBi2EHR
x9hZt2sNbI07L3TbISzOe5xtoXEK7bftUJXaxEOYJwDHrADUre1tWjhG0esN
7VwPFT1UFLYLOCReE7/54FOkaleWeF99RR7p23Io6APErDc5HFiAVj24Gv9r
9QeC4/nDw4cXtNcIBxJvQ1/QrUXbl3pr6DPbKIQQZwstECqI6fAkfcoFa/PZ
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
jncpRicAAA==

-->

</rfc>

