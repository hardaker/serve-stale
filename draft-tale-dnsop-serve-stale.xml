<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-tale-dnsop-serve-stale-00" category="std">

  <front>
    <title>Serving Stale Data to Improve DNS Resiliency</title>

    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>
    <author initials="W." surname="Kumari" fullname="Warren Kumari">
      <organization>Google</organization>
      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>
          <city>Mountain View</city>
          <code>CA 94043</code>
          <country>USA</country>
        </postal>
        <email>warren@kumari.net</email>
      </address>
    </author>

    <date year="2017" month="March"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This draft defines a method for recursive resolvers to use stale DNS
data to avoid outages when authoritative nameservers cannot be reached
to refresh expired data.</t>



    </abstract>


    <note title="Ed note">


<t>Text inside square brackets ([]) is additional background
information, answers to frequently asked questions, general musings,
etc.  They will be removed before publication.  This document is being
collaborated on in Github at
&lt;https://github.com/vttale/serve-stale&gt;.  The most recent
version of the document, open issues, etc should all be available
here.  The authors gratefully accept pull requests.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Traditionally the Time To Live (TTL) of a DNS resource record has been
understood to represent the maximum number of seconds that a record
can be used before it must be discarded, based on its description and
usage in <xref target="RFC1035"/> and clarifications in <xref target="RFC2181"/>.
Specifically, <xref target="RFC1035"/> Section 3.2.1 says that it "specifies the
time interval that the resource record may be cached before the source
of the information should again be consulted".</t>

<t>Notably, the original DNS specification does not say that data past
its expiration cannot be used.  This document proposes a method for
how recursive resolvers should handle stale DNS data to balance the
competing needs of resiliency and freshness. It is predicated on the
observation that authoritative server unavailability can cause outages
even when the underlying data those servers would return is typically
unchanged.</t>

<t>There are a number of reasons why an authoritative server may become
unreachable, including Denial of Service (DoS) attacks, network
issues, and so on.  This document suggests that, if the recursive
server is unable to contact the authoritative server but still has
data for the query name, it essentially extends the TTL of the
existing data on the assumption that "stale bread is better than no
bread".</t>

<t>Several major recursive resolver operations currently use stale data
for answers in some way, including Akamai, OpenDNS, and Xerocole.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/>.</t>

<t>For a comprehensive treatment of DNS terms, please see <xref target="RFC7719"/>.</t>

</section>
<section anchor="description" title="Description">

<t>Three notable timers drive considerations for the use of stale data,
as follows:</t>

<t><list style="symbols">
  <t>A client response timer, which is the maximum amount of time a
recursive resolver should allow between the receipt of a resolution
request and sending its response.</t>
  <t>A query resolution timer, which caps the total amount of time a
recursive resolver spends processing the query.</t>
  <t>A maximum stale timer, which caps the amount of time
that records will be kept past their expiration.</t>
</list></t>

<t>Recursive resolvers already have the second timer; the first and
third timers are new concepts for this mechanism.</t>

<t>When a request is received by the recursive resolver, it SHOULD start
the client response timer.  This timer is used to avoid client
timeouts.  It SHOULD be configurable, with a recommended value of 1.8
seconds.</t>

<t>The resolver then checks its cache for an unexpired answer. If it
finds none and the Recursion Desired flag is not set in the request,
it SHOULD immediately return the response without consulting the
cache for expired records.</t>

<t>If iterative lookups will be done, it SHOULD start the query
resolution timer.  This timer bounds the work done by the resolver,
and is commonly around 10 to 30 seconds. [ BIND 9 used to use a
hard-coded constant of 30 seconds and has more recently added a
configuration parameter that defaults to 10 seconds and is capped at
30. A rigorous exploration of other implementations has not yet been
done. ]</t>

<t>If the answer has not been completely determined by the time the
client response timer has elapsed, the resolver SHOULD then check its
cache to see whether there is expired data that would satisfy the
request.  If so, it adds that data to the response message and SHOULD
set the TTL of each expired record in the message to 1 second.  [
This 1 second TTL is ripe for discussion. ] The response is then sent
to the client while the resolver continues its attempt to refresh the
data.</t>

<t>The maximum stale timer is used for cache management and is
independent of the query resolution process. This timer is
conceptually different from the maximum cache TTL that exists in many
resolvers, the latter being a clamp on the value of TTLs as received
from authoritative servers.  The maximum stale timer SHOULD be
configurable, and defines the length of time after a record expires
that it SHOULD be retained in the cache.  The suggested value is 7
days, which gives time to notice the resolution problem and for human
intervention for fixing it.</t>

<t>This same basic technique MAY be used to handle stale data associated
with delegations.  If authoritative server addresses are not able to
be refreshed, resolution can possibly still be successful if the
authoritative servers themselves are still up.</t>

</section>
<section anchor="implementation-caveats" title="Implementation Caveats">

<t>Answers from authoritative servers that have a DNS Response Code of
either 0 (NOERROR) or 3 (NXDOMAIN) MUST be considered to have
refreshed the data at the resolver.  In particular, this means that
this method is not meant to protect against operator error at the
authoritative server that turns a name that is intended to be valid
into one that is non-existent, because there is no way for a resolver
to know intent.</t>

<t>Resolution is given a chance to succeed before stale data is used to
adhere to the original intent of the design of the DNS.  This
mechanism is only intended to add robustness to failures, and to be
enabled all the time.  If stale data were used immediately and then a
cache refresh attempted after the client response has been sent, the
resolver would frequently be sending data that it would have had no
trouble refrefreshing.</t>

<t>It is important to continue the resolution attempt after the stale
response has been sent, until the query resolution timeout, because
some pathological resolutions can take many seconds to succeed as they
cope with unavailable servers, bad networks, and other problems.
Stopping the resolution attempt when the response with expired data
has been sent would mean that answers in these pathological cases
would never be refreshed.</t>

<t>Canonical Name (CNAME) records mingled in the expired cache with other
records at the same owner name can cause surprising results.  This was
observed with an initial implementation in BIND, where a hostname
changed from having a CNAME record to an IPv4 Address (A) record.
BIND does not evict CNAMEs in the cache when other types are received,
which in normal operations is not an issue.  However, after both
records expired and the authorities became unavailable, the fallback
to stale answers returned the older CNAME instead of the newer A.</t>

<t>[ This probably applies to other occluding types, so more thought
should be given to the overall issue. It should probably also be
rewritten to not suggest that this only a quirk of BIND. ]</t>

<t>Keeping records around after their normal expiration will of course
cause caches to grow larger than if records were removed at their TTL.
Specific guidance on managing cache sizes is outside the scope of this
document.  Some areas for consideration include whether to track the
popularity of names in client requests versus evicting by maximum age,
and whether to provide a feature for manually flushing only stale
records.</t>

</section>
<section anchor="implementation-status" title="Implementation Status">

<t>[RFC Editor: per RFC 6982 this section should be removed prior to
publication.]</t>

<t>The algorithm described in this draft was originally implemented as a
patch to BIND 9.7.0.  It has been in production on Akamai's production
network since 2011, and effectively smoothed over transient failures
and longer outages that would have resulted in major incidents. The
patch has been contributed to the Internet Systems Consortium in
anticipation that it will be incorporated to their main BIND
distribution.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>The most obvious security issue is the increased likelihood of DNSSEC
validation failures when using stale data because signatures could be
returned outside their validity period.  This would only be an issue
if the authorative servers are unreachable, the only time the
techniques in this document are used, and thus does not introduce
a new failure in place of what would have otherwise been success.</t>

<t>Additionally, bad actors have been known to use DNS caches to keep
records alive even after their authorities have gone away.  This makes
that easier.</t>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>This document does not add any practical new privacy issues.</t>

</section>
<section anchor="nat-considerations" title="NAT Considerations">

<t>The method described here is not affected by the use of NAT devices.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document contains no actions for IANA.  This section will be
removed during conversion into an RFC by the RFC editor.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors wish to thank Matti Klock, Mukund Sivaraman, Jean Roy, and
Jason Moreau for initial review.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC2181;
&RFC2119;


    </references>

    <references title='Informative References'>

&RFC7719;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAGDiwFgAA41aYXcbt7H9jl+B53yo3UMxlOzUsfpOX1nJSdVYkispTXvi
nB5wFyRR7S42C6xotif/vXdmgN2lw7TvQ2KJ3AUGM3fu3Bno5ORERRcre67v
bffkmo2+j6ay+tJEo6PXV3Xb+Sf8fnOv72xwlbNNsVelLxpT462yM+t4Qq+c
lE3w7UnAMvYk8CeLhSpNxFNni9PXJ4uXSrm2O9ex60M8WyzeLM6U6aw511dN
tF1jo9ptzmmr2/f6O989kjlfd75v1eNufOjkkvZUhYnnOsRSqcKXePJc9+HE
hMI51bpzpfUJ7C/437CvO7sO8rPvIv+iTB+3vuMn8Z/WrgnYfH4x1+/MrsMx
LX8s57w0T67UF4df+Q67Lh9NbZx+sMW28ZXfOBv4y4BtLEw8/WKh/9B5U+7M
nr8oXNyf6wtTrzpXbmQlHAGbXC/14uz01dnJ6eKLV+nzvokdHv/2fskfWOxV
wYVw7+8N7zwvfK0OD/HdXH/T16ZzkwN8ZzoYPv2crf/a+01lDw3+zWKhl3W7
dXFrDT7U7033eGj9NdllXKP/4uxucoKLpX7zavHq5X80fsem/P6RTZlT2NXJ
yYk2K1hgCvz2sHVBkKVLu3aNDdro2iJcpV77Tne26LvgAMvOBl892S4QVvtg
dRD03twT8hjB5skjcr6PZoN1dls4QSLvoom0BvmHUYtVCtM0PuoVrWyKrS0V
VgBcsM9W24+t62ypaeW52IyH7d/fln+nf2G3/RgpAq6EIT/2wLZe4USPNgb9
/MP3H354oXEwU5YuOt+YSq/w5QYAb0rlGpysNvTFTJsm7NKhsPWPvW1itdcm
PGJ3/BboqTDTG9vYDsvUfUAChJmysZhr/bC1e71zVSXnqJG/JX7E+la3/apy
BW/DT5KjfdHX2IFsW1kshISqKrPyHXIXnmtwJP01wNCvtInqw/9uY2zD+eef
b/gzwt/nT5H8/vkk+T/8TizRtQ+RIoYdFPkYO2u/1sDWsPNM+xZhcSHgbDON
U+iw9X1VaiOHME8AjlkBqFvb2bSwRDHoDdm57ivyUFHYNuKQeI39FmJIkapd
WeJ99RnxSOfLviAfIGadyeHAAmTVg6vxP6/fETiePzy8e0H2GqZAwlvfFeTW
wnel3hrymW0UQoizRQ+EMmJaPEk+pQVr89HVfa2bvl7ZjhYLeLspEd+tiVhZ
FgOjNXRYwHgIl4sUXAZk6UJhutKWM8AmpMAAWKUNRedaOgJwU6o+AOgUsn/9
63/uvro4Xbz84qef6BtdVMi3dYp+GB85O/3y9Kef5uq+tQV/D0/MDl+/t+wu
/XJ+Nj/VweyT7bDvWZDXLH1kUU1q2h1U/QRk8kPkg08dV5s9HargJMunpQfl
MZUQMsmKARIb4h16F4foK0D0GUJ84yPwAbPpLeT2xlF+UchCPhUvUnrYSSmO
M4h1zBOtCVGRNznH5dGRCygiP8sW1MXWh0+oSW397ig9JeO3iEM1YSmdWWpl
KoOywi5EQrU2UvFrrAVK4ItuKL0cSeYj0GKY6yvOW8CtpCMKLGgRv6JklJMI
zA5ITwhP901KLawe93Rk/Ec8mvhS2SckJpMmOZZRXu3JNDF860NeC9zKR+xs
7DtKZh33rYAJ2VHg5Bt4kcgdKayJG80kI0C3gUC529IJjxsrmIF3LBZkfiZK
mAEkRdWTBNCXtnEIO9ZjNQN/Pr/09y9AWxFMC2pBsdlBWKhMNeTM4PURMgz9
ZkP0wc7DHusE4xRalWzCK/AhzKAgApHYRwB/9ASrHgtHYmYQh1Qoqmf0PMiq
23MtmlFWIbawwjEpoapYYQvw0sO7xJ7KfnQhDqGQsKNGhL5ux6g/E6it4K5S
CD4iNem7Bmmg+HPKn3sEmkuJ+cfRAksM3SXiwHedVKSx4pINis6SSxdyNCBS
KPb7aYRELc30LQgf+JcI/NV2HjXHzomeH2xXO1ZSewaLfqRqBs4I+tn1t/cP
z2byr7655Z/v3v7526u7t5f08/0fl+/eDT/IEwq/3H77Ln1PP41vXtxeX7+9
uZSXr5d/eyb2PLt9/3B1e7N894yOEYELNeCCgEv5mkgOiUdJZzIPr/DLhFhP
3xCxqq/IMZryurPIJfYshJWJvCTiSVSA1WpAsq2QCoQYi1X+D6u8fp1W+Qz4
HriefAO9Rlwm8APvdqSaaG2iRoiQHLCMMU7s9SRiM2Xo26ryu3Cu1K/1EkXC
kU2Ie4tX07oz5KUrtpzUk4JmalJ4jEdifaOO4GYs5GBGoG9nE5eQJMBRpLby
4z2fK9VtSU3gnlBDzJwtmoudki/je4eGFqYVUyPcU/3/DG05yUDrBZKPdh3S
Mm2Zjy3+O77f4U6Kc1BKXhgk2SNrFFQcesN1k5qDje6OFA9TUZruQRpPqUiy
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

-->

</rfc>

