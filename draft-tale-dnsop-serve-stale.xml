<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-tale-dnsop-serve-stale-01" category="std" updates="1034, 1035">

  <front>
    <title abbrev="DNS Serve Stale">Serving Stale Data to Improve DNS Resiliency</title>

    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>
    <author initials="W." surname="Kumari" fullname="Warren Kumari">
      <organization>Google</organization>
      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>
          <city>Mountain View</city>
          <code>CA 94043</code>
          <country>USA</country>
        </postal>
        <email>warren@kumari.net</email>
      </address>
    </author>

    <date year="2017" month="June"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This draft defines a method for recursive resolvers to use stale DNS
data to avoid outages when authoritative nameservers cannot be reached
to refresh expired data.</t>



    </abstract>


    <note title="Ed note">


<t>Text inside square brackets ([]) is additional background
information, answers to frequently asked questions, general musings,
etc.  They will be removed before publication.  This document is being
collaborated on in GitHub at
&lt;https://github.com/vttale/serve-stale&gt;.  The most recent
version of the document, open issues, etc should all be available
here.  The authors gratefully accept pull requests.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Traditionally the Time To Live (TTL) of a DNS resource record has been
understood to represent the maximum number of seconds that a record
can be used before it must be discarded, based on its description and
usage in <xref target="RFC1035"/> and clarifications in <xref target="RFC2181"/>.</t>

<t>This document proposes that the definition of the TTL be explicitly
expanded to allow for expired data to be used in the exceptional
circumstance that a recursive resolver is unable to refresh the
information.  It is predicated on the observation that authoritative
server unavailability can cause outages even when the underlying data
those servers would return is typically unchanged.</t>

<t>A method is described for this use of stale data, balancing the
competing needs of resiliency and freshness.  While this intended to
be immediately useful to the installed base of DNS software, an
<xref target="RFC6891"/> EDNS option is also proposed for enhanced signalling
around the use of stale data by implementations that understand it.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
<xref target="RFC2119"/> when, and only when, they appear in all capitals, as shown
here.</t>

<t>For a comprehensive treatment of DNS terms, please see <xref target="RFC7719"/>.</t>

</section>
<section anchor="background" title="Background">

<t>There are a number of reasons why an authoritative server may become
unreachable, including Denial of Service (DoS) attacks, network
issues, and so on.  If the recursive server is unable to contact the
authoritative servers for a name but still has relevant data that has
aged past its TTL, that information can still be useful for generating
an answer under the metaphorical assumption that, "stale bread is
better than no bread."</t>

<t><xref target="RFC1035"/> Section 3.2.1 says that the TTL "specifies the time
interval that the resource record may be cached before the source of
the information should again be consulted", and Section 4.1.3 further
says the TTL, "specifies the time interval (in seconds) that the
resource record may be cached before it should be discarded."</t>

<t>A natural English interpretation of these remarks would seem to be
clear enough that records past their TTL expiration must not be used,
However, <xref target="RFC1035"/> predates the more rigorous terminology of
<xref target="RFC2119"/> which softened the interpretation of "may" and "should".</t>

<t><xref target="RFC2181"/> aimed to provide "the precise definition of the Time to
Live" but in Section 8 was mostly concerned with the numeric range of
values and the possibility that very large values should be capped. (It
also has the curious suggestion that a value in the range 2147483648
to 4294967295 should be treated as zero.)  It closes that section by
noting, "The TTL specifies a maximum time to live, not a mandatory
time to live."  This is again not <xref target="RFC2119"/>-normative language, but
does convey the natural language connotation that data becomes
unusable past TTL expiry.</t>

<t>Several major recursive resolver operations currently use stale data
for answers in some way, including Akamai, OpenDNS, Xerocole, and
Nominum.  Their collective operational experience is that it provides
significant benefit with minimal downside.</t>

</section>
<section anchor="standards-action" title="Standards Action">

<t>The definition of TTL in <xref target="RFC1035"/> Sections 3.2.1 and 4.1.3 is
amended to read:</t>

<t><list style="hanging">
  <t hangText='TTL'>
  a 32 bit unsigned integer number of seconds in the range 0 -
2147483647 that specifies the time interval that the resource record
MAY be cached before the source of the information MUST again be
consulted.  Zero values are interpreted to mean that the RR can only
be used for the transaction in progress, and should not be cached.
Values with the high order bit set SHOULD be capped at no more than
2147483647.  If the authority for the data is unavailable when
attempting to refresh the data past the given interval, the record MAY
be used as though it has a remaining TTL of 1 second.</t>
</list></t>

</section>
<section anchor="edns-option" title="EDNS Option">

<t>While the basic behaviour of this answer-of-last-resort can be
achieved with changes only to resolvers, explicit signalling about the
use of stale data can be done with an EDNS <xref target="RFC6891"/> option.</t>

<t>[ This section will be fleshed out a bit more thoroughly if there is
interest in pursuing the option. ]</t>

<section anchor="option-format" title="Option Format">

<t>The option is structured as follows:</t>

<figure><artwork><![CDATA[
              +0 (MSB)                        +1 (LSB)
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
0: |                         OPTION-CODE                       |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
2: |                        OPTION-LENGTH                      |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
4: |                     STALE-RRSET-INDEX 1                   |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
6: |                                                           |
8: |                         TTL-EXPIRY 1                      |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   :  ... additional STALE-RRSET-INDEX / TTL-EXPIRY pairs ...  :
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='OPTION-CODE'>
  2 octets per <xref target="RFC6891"/>.  For Serve-Stale the code is TBD by IANA.</t>
  <t hangText='OPTION-LENGTH:'>
  2 octets per <xref target="RFC6891"/>.  Contains the length of the payload
following OPTION-LENGTH, in octets.</t>
  <t hangText='STALE-RRSET-INDEX'>
  Two octets as a signed integer, indicating the first RRSet in the
message which is beyond its TTL, with RRSet counting starting at 1 and
spanning message sections.</t>
  <t hangText='TTL-EXPIRY'>
  Four octets as an unsigned integer, representing the number of
seconds that have passed since the TTL for the RRset expired.</t>
</list></t>

</section>
<section anchor="option-usage" title="Option Usage">

<t>Software making a DNS request can signal that it understands
Serve-Stale by including the option with one STALE-RRSET-INDEX
initialized to any negative value and TTY-EXPIRY initialized to 0.
The index is set to a negative value to detect mere reflection of the
option by responders that don't really understand it.</t>

<t>If the request is made to a recursive resolver which used any stale
RRsets in its reply, it then fills in the corresponding indices and
staleness values.  If no records are stale, STALE-RRSET-INDEX and
TTL-EXPIRY are set to 0.</t>

<t>If the request is made to an authoritative nameserver, it can use the
option in the reply to indicate how the resolver should treat the
records in the reply if they are unable to be refreshed later.  A
default for all RRsets in the message is established by setting the
first STALE-RRSET-INDEX to 0, with optional additional
STALE-RRSET-INDEX values overriding the default.  A TTL-EXPIRY value
of 0 means to never serve the RRset as stale, while non-zero values
represent the maximum amount of time it can be used before it MUST be
evicted.  [ Does anyone really want to do this?  It adds more state
into resolvers. Is the idea only for purists, or is there a practical
application? ]</t>

<t>No facility is made for a client of a resolver to signal that it
doesn't want stale answers, because if a client has knowledge of
Serve-Stale as an option, it also has enough knowledge to just ignore
any records that come back stale.  [ There is admittedly the issue
that the client might just want to wait out the whole attempted
resolution, which there's currently no way to indicate.  The absolute
value of STALE-RRSET-INDEX could be taken as a timer the requester is
willing to wait for an answer, but that's kind of gross overloading it
like that Shame to burn another field on that though, but on the other
hand it would be nice if a client could always signal its impatience
level &#8211; "I must have an answer within 900 milliseconds!" ]</t>

</section>
</section>
<section anchor="example-method" title="Example Method">

<t>There is conceivably more than one way a recursive resolver could
responsibly implement this resiliency feature while still respecting
the intent of the TTL as a signal for when data is to be refreshed.</t>

<t>In this example method three notable timers drive considerations for
the use of stale data, as follows:</t>

<t><list style="symbols">
  <t>A client response timer, which is the maximum amount of time a
recursive resolver should allow between the receipt of a resolution
request and sending its response.</t>
  <t>A query resolution timer, which caps the total amount of time a
recursive resolver spends processing the query.</t>
  <t>A maximum stale timer, which caps the amount of time
that records will be kept past their expiration.</t>
</list></t>

<t>Recursive resolvers already have the second timer; the first and
third timers are new concepts for this mechanism.</t>

<t>When a request is received by the recursive resolver, it SHOULD start
the client response timer.  This timer is used to avoid client
timeouts.  It SHOULD be configurable, with a recommended value of 1.8
seconds.</t>

<t>The resolver then checks its cache for an unexpired answer. If it
finds none and the Recursion Desired flag is not set in the request,
it SHOULD immediately return the response without consulting the
cache for expired records.</t>

<t>If iterative lookups will be done, it SHOULD start the query
resolution timer.  This timer bounds the work done by the resolver,
and is commonly around 10 to 30 seconds.</t>

<t>If the answer has not been completely determined by the time the
client response timer has elapsed, the resolver SHOULD then check its
cache to see whether there is expired data that would satisfy the
request.  If so, it adds that data to the response message and SHOULD
set the TTL of each expired record in the message to 1 second.  The
response is then sent to the client while the resolver continues its
attempt to refresh the data.  1 second was chosen because historically
0 second TTLs have been problematic for some implementations.  It not
only sidesteps those potential problems with no practical negative
consequence, it would also rate limit further queries from any client
that is honoring the TTL, such as a forwarding resolver.</t>

<t>The maximum stale timer is used for cache management and is
independent of the query resolution process. This timer is
conceptually different from the maximum cache TTL that exists in many
resolvers, the latter being a clamp on the value of TTLs as received
from authoritative servers.  The maximum stale timer SHOULD be
configurable, and defines the length of time after a record expires
that it SHOULD be retained in the cache.  The suggested value is 7
days, which gives time to notice the resolution problem and for human
intervention to fix it.</t>

<t>This same basic technique MAY be used to handle stale data associated
with delegations.  If authoritative server addresses are not able to
be refreshed, resolution can possibly still be successful if the
authoritative servers themselves are still up.</t>

</section>
<section anchor="implementation-caveats" title="Implementation Caveats">

<t>Answers from authoritative servers that have a DNS Response Code of
either 0 (NOERROR) or 3 (NXDOMAIN) MUST be considered to have
refreshed the data at the resolver.  In particular, this means that
this method is not meant to protect against operator error at the
authoritative server that turns a name that is intended to be valid
into one that is non-existent, because there is no way for a resolver
to know intent.</t>

<t>Resolution is given a chance to succeed before stale data is used to
adhere to the original intent of the design of the DNS.  This
mechanism is only intended to add robustness to failures, and to be
enabled all the time.  If stale data were used immediately and then a
cache refresh attempted after the client response has been sent, the
resolver would frequently be sending data that it would have had no
trouble refreshing.</t>

<t>It is important to continue the resolution attempt after the stale
response has been sent, until the query resolution timeout, because
some pathological resolutions can take many seconds to succeed as they
cope with unavailable servers, bad networks, and other problems.
Stopping the resolution attempt when the response with expired data
has been sent would mean that answers in these pathological cases
would never be refreshed.</t>

<t>Canonical Name (CNAME) records mingled in the expired cache with other
records at the same owner name can cause surprising results.  This was
observed with an initial implementation in BIND when a hostname
changed from having an IPv4 Address (A) record to a CNAME.  The
version of BIND being used did not evict other types in the cache when
a CNAME was received, which in normal operations is not a significant
issue.  However, after both records expired and the authorities became
unavailable, the fallback to stale answers returned the older A
instead of the newer CNAME.</t>

<t>[ This probably applies to other occluding types, so more thought
should be given to the overall issue. ]</t>

<t>Keeping records around after their normal expiration will of course
cause caches to grow larger than if records were removed at their TTL.
Specific guidance on managing cache sizes is outside the scope of this
document.  Some areas for consideration include whether to track the
popularity of names in client requests versus evicting by maximum age,
and whether to provide a feature for manually flushing only stale
records.</t>

</section>
<section anchor="implementation-status" title="Implementation Status">

<t>[RFC Editor: per RFC 6982 this section should be removed prior to
publication.]</t>

<t>The algorithm described in the <xref target="example-method"/> section was
originally implemented as a patch to BIND 9.7.0.  It has been in
production on Akamai's production network since 2011, and effectively
smoothed over transient failures and longer outages that would have
resulted in major incidents. The patch was contributed to the Internet
Systems Consortium and is now distributed with BIND 9.12.</t>

<t>Unbound has a similar feature for serving stale answers, but it works
in a very different way by returning whatever cached answer it has
before trying to refresh expired records. This is unfortunately not
faithful to the ideal that data past expiry should attempt to be
refreshed before being served.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>The most obvious security issue is the increased likelihood of DNSSEC
validation failures when using stale data because signatures could be
returned outside their validity period.  This would only be an issue
if the authoritative servers are unreachable, the only time the
techniques in this document are used, and thus does not introduce
a new failure in place of what would have otherwise been success.</t>

<t>Additionally, bad actors have been known to use DNS caches to keep
records alive even after their authorities have gone away.  This
potentially makes that easier, although without introducing a new
risk.</t>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>This document does not add any practical new privacy issues.</t>

</section>
<section anchor="nat-considerations" title="NAT Considerations">

<t>The method described here is not affected by the use of NAT devices.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document contains no actions for IANA.  This section will be
removed during conversion into an RFC by the RFC editor.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors wish to thank Matti Klock, Mukund Sivaraman, Jean Roy, and
Jason Moreau for initial review.  Feedback from Robert Edmonds and
Davey Song has also been incorporated.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC2181;
&RFC2119;
&RFC6891;


    </references>

    <references title='Informative References'>

&RFC7719;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAF699lkAA7Vba3fcxpH93r+iw3yItJkZk5SsB3fPJjRJ24wlykvSsb1x
Tk4P0DODEAMgeHA0dvzf996qbgBDjuScPY7OkUTOAI3qety6VV2YTqemzdrc
n9gbX99nxdLetC739ty1zralvVxXdXmP369u7LVvsjzzRbI1bj6v/f2JfMwb
vd5m0jIp3BqrpbVbtFN+Nk2LpqymDa+aNvLJ4ZFJXYurjg+PXk4PXxiTVfWJ
beuuaY8PD18fHhtXe3diL4vW14VvzWYpz3r3tf22rO8o5hd12VXmbjNcND3n
M03i2hPbtKnpKj6kObFHh8+eT/jvp8YkZYq7T2zXTF2TZJmpshNj7RR7TeT/
Zruu/aLRn8u6lV+M69pVWcuV+GttVmDd89nZzL5xmxoq8fKx7v3c3WepPdv9
qqzx1NM7t3aZvfXJqijzcpn5Rr5s8BgPsY8+PbSf1aVLN24rXyRZuz2xZ249
r7N0qSthC3jI21N7eHz0/Hh6dPjp8/B5V7Q1Lv/m5lQ+8HhWDrVC5X908uRZ
Uq7N7ia+ndmvurWrs9EGvnU1BB9/LtJ/UZbL3O8K/OLw0J6uq1XWrrzDh/Zr
V9/tSv+WcrmssH/O/Ga0g7NT+/r54fNnHxV+I6L88U5EmdEVzHQ6tW4OCVyC
325XWaPeZlO/yArfWGfXHuZK7aKsbe2Trm4yeGjtmzK/93VDv+4abxv19Ksb
eqN4u7svYbmya90S62xWUIJaPmtdyzWoH/FkrJK4oihbO+fKLln51GAFuAue
s7L+fZXVPrVceaYy42L/t4v0b/wfcvv3LS2QpRDkHx383c6xozvfNvbJD3/5
4a9PLTbm0jRrs7JwuZ3jyyWcvkhNVmBna8cvJtYVzSZsCo/+R+eLNt9a19zh
6fit4VXNxC594Wsss+4aBEAzMb5NZtbervzWbrI8132sEespfsT63lbdPM8S
eYxcSUWXSbfGEyjb3GMhBFSeu3lZI9SguQJbsl9k7Zfd3LrW/PBfq7atmpNP
PlnCQbo5/e+T+5Z6/2QECD/8t0pi12XT0mJ4gqGO8WRbLix8q3/yxJYVzJI1
DfY2sdiFbVZll6fW6SbcPRzHzeGoK1/7sLBasbFLyrnocmooSXzVYpO4TfTW
tE2w1DpLU9xvfktsqcu0S6gD2Kx20RxYgFLdZmv8U9o3dI4nt7dvnlJeJ7hI
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
/LDS13jDW7BcyPwfwllxriFAAAA=

-->

</rfc>

