<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-tale-dnsop-serve-stale-00" category="std">

  <front>
    <title>Serving Stale Data to Improve DNS Resiliency</title>

    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>
    <author initials="W." surname="Kumari" fullname="Warren Kumari">
      <organization>Google</organization>
      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>
          <city>Mountain View</city>
          <code>CA 94043</code>
          <country>USA</country>
        </postal>
        <email>warren@kumari.net</email>
      </address>
    </author>

    <date year="2017" month="February"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This draft defines a method for recursive resolvers to use stale DNS
data to avoid outages when authoritative nameservers cannot be reached
to refresh expired data.</t>



    </abstract>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Traditionally the Time To Live (TTL) of a DNS resource record has been
understood to represent the maximum number of seconds that a record
can be used before it must be discarded, based on its description and
usage in <xref target="RFC1035"/> and clarifications in <xref target="RFC2181"/>.
Specifically, <xref target="RFC1035"/> Section 3.2.1 says that it "specifies the
time interval that the resource record may be cached before the source
of the information should again be consulted".</t>

<t>Notably, the original DNS specification does not say that data past
its expiration cannot be used.  This document proposes a method for
how recursive resolvers should handle stale DNS data to balance the
competing needs of resiliency and freshness. It is predicated on the
observation that authoritative server unavailability can cause outages
even when the underlying data those servers would return is typically
unchanged.</t>

<t>Several major recursive resolver operations currently use stale data
for answers in some way, including Akamai, OpenDNS, Xerocole, and
Google (I think).</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
document are to be interpreted as described in <xref target="RFC2119"/></t>

<t>For a comprehensive treatment of DNS terms, please see <xref target="RFC7719"/>.</t>

</section>
<section anchor="description" title="Description">

<t>Three notable timers drive considerations for the use of stale data,
as follows:</t>

<t><list style="symbols">
  <t>A client response timer, which is the maximum amount of time a
recursive resolver should allow between the receipt of a resolution
request and sending its response.</t>
  <t>A query resolution timer, which caps the total amount of time a
recursive resolver spends processing the query.</t>
  <t>A maximum stale timer, which caps the amount of time
that records will be kept past their expiration.</t>
</list></t>

<t>Recursive resolvers already have the second timer; the first and
third timers are new concepts for this mechanism.</t>

<t>When a request is received by the recursive resolver, it SHOULD start
the client response timer.  This timer is used to avoid client
timeouts.  It SHOULD be configurable, with a recommended value of 1.8
seconds.</t>

<t>The resolver then checks its cache for an unexpired answer. If it
finds none and the Recursion Desired flag is not set in the request,
it SHOULD immediately return the response without consulting the
expired record cache.</t>

<t>If iterative lookups will be done, it SHOULD start the query
resolution timer.  This timer bounds the work done by the resolver,
and is commonly 30 seconds.</t>

<t>If the answer has not been completely determined when the client
response timer has elapsed, the resolver SHOULD then check its cache
to see whether there is expired data that would satisfy the request.
If so, it sends a response and the TTL fields of the expired records
SHOULD be set to 1.</t>

<t>The maximum stale timer is used for cache management and is
independent of the query resolution process. This timer is
conceptually different from the maximum cache TTL that exists in many
resolvers, the latter being a clamp on the value of TTLs as
received from authoritative servers.  The maximum stale timer SHOULD
be configurable, and defines the length of time after a record expires
that it SHOULD be retained in the cache.  The suggested value is 7
days, which gives time to notice the problem and and for human
intervention for fixing it.</t>

</section>
<section anchor="implementation-caveats" title="Implementation Caveats">

<t>Answers from authoritative servers that have a DNS Response Code of
either 0 (NOERROR) or 3 (NXDOMAIN) MUST be considered to have
refreshed the data at the resolver.  In particular, this means that
this method is not meant to protect against operator error at the
authoritative server that turns a name that is intended to be valid
into one that is non-existent, because there is no way for a resolver
to know intent.</t>

<t>Resolution is given a chance to succeed before stale data is used to
adhere to the original intent of the design of the DNS.  This
mechanism is only intended to add robustness to failures, and not be a
standard operational occurrence as would happen if stale data were
used immediately and then a cache refresh attempted after the client
response has been sent.</t>

<t>It is important to continue the resolution attempt after the stale
response has been sent because some pathological resolutions can take
at least a dozen seconds succeed as they cope with down servers, bad
networks, and other problems.  Stopping the resolution attempt when
the response has been sent would mean that answers in these
pathological cases would never be refreshed.</t>

<t>Canonical Name (CNAME) records mingled in the expired cache with other
records at the same owner name can cause surprising results.  This was
observed with an initial implementation in BIND, where a hostname
changed from having a CNAME record to an IPv4 Address (A) record.
BIND does not evict CNAMEs in the cache when other types are received,
which in normal operations is not an issue.  However, after both
records expired and the authorities became unavailable, the fallback
to stale answers returned the older CNAME instead of the newer A.</t>

<t>(This might apply to other occluding types, so more thought should be
given to the overall issue.)</t>

<t>Keeping records around after their normal expiration will of course
cause caches to grow larger than if records were removed at their TTL.
Specific guidance on managing cache sizes is outside the scope of this
document.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>The most obvious security issue is the increased likelihood of DNSSEC
validation failures when using stale data because signatures could be
returned outside their validity period.</t>

<t>Additionally, bad actors have been known to use DNS caches as a kind
of perpetual cloud database, keeping records alive even after their
authorities have gone away.  This makes that easier.</t>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>This document does not add any practical new privacy issues.</t>

</section>
<section anchor="nat-considerations" title="NAT Considerations">

<t>The method described here is not affected by the use of NAT devices.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document contains no actions for IANA.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors wish to thank Matti Klock for initial review.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC2181;
&RFC2119;
&RFC7719;


    </references>




  </back>

<!-- ##markdown-source:
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
fwowyfwHlYcq1FobAAA=

-->

</rfc>

