<?xml version="1.0" encoding="us-ascii"?>
  <?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
  <!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->

<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>

<rfc ipr="trust200902" docName="draft-tale-dnsop-serve-stale-02" category="std" updates="1034, 1035">

  <front>
    <title abbrev="DNS Serve Stale">Serving Stale Data to Improve DNS Resiliency</title>

    <author initials="D.C." surname="Lawrence" fullname="David C Lawrence">
      <organization>Akamai Technologies</organization>
      <address>
        <postal>
          <street>150 Broadway</street>
          <city>Cambridge</city>
          <code>MA 02142-1054</code>
          <country>USA</country>
        </postal>
        <email>tale@akamai.com</email>
      </address>
    </author>
    <author initials="W." surname="Kumari" fullname="Warren Kumari">
      <organization>Google</organization>
      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>
          <city>Mountain View</city>
          <code>CA 94043</code>
          <country>USA</country>
        </postal>
        <email>warren@kumari.net</email>
      </address>
    </author>

    <date year="2017" month="October"/>

    <area>Internet</area>
    <workgroup>DNSOP Working Group</workgroup>
    <keyword>Internet-Draft</keyword>

    <abstract>


<t>This draft defines a method for recursive resolvers to use stale DNS
data to avoid outages when authoritative nameservers cannot be reached
to refresh expired data.</t>



    </abstract>


    <note title="Ed note">


<t>Text inside square brackets ([]) is additional background
information, answers to frequently asked questions, general musings,
etc.  They will be removed before publication.  This document is being
collaborated on in GitHub at
&lt;https://github.com/vttale/serve-stale&gt;.  The most recent
version of the document, open issues, etc should all be available
here.  The authors gratefully accept pull requests.</t>


    </note>


  </front>

  <middle>


<section anchor="introduction" title="Introduction">

<t>Traditionally the Time To Live (TTL) of a DNS resource record has been
understood to represent the maximum number of seconds that a record
can be used before it must be discarded, based on its description and
usage in <xref target="RFC1035"/> and clarifications in <xref target="RFC2181"/>.</t>

<t>This document proposes that the definition of the TTL be explicitly
expanded to allow for expired data to be used in the exceptional
circumstance that a recursive resolver is unable to refresh the
information.  It is predicated on the observation that authoritative
server unavailability can cause outages even when the underlying data
those servers would return is typically unchanged.</t>

<t>A method is described for this use of stale data, balancing the
competing needs of resiliency and freshness.  While this intended to
be immediately useful to the installed base of DNS software, an
<xref target="RFC6891"/> EDNS option is also proposed for enhanced signalling
around the use of stale data by implementations that understand it.</t>

</section>
<section anchor="terminology" title="Terminology">

<t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
"SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
"OPTIONAL" in this document are to be interpreted as described in
<xref target="RFC2119"/> when, and only when, they appear in all capitals, as shown
here.</t>

<t>For a comprehensive treatment of DNS terms, please see <xref target="RFC7719"/>.</t>

</section>
<section anchor="background" title="Background">

<t>There are a number of reasons why an authoritative server may become
unreachable, including Denial of Service (DoS) attacks, network
issues, and so on.  If the recursive server is unable to contact the
authoritative servers for a name but still has relevant data that has
aged past its TTL, that information can still be useful for generating
an answer under the metaphorical assumption that, "stale bread is
better than no bread."</t>

<t><xref target="RFC1035"/> Section 3.2.1 says that the TTL "specifies the time
interval that the resource record may be cached before the source of
the information should again be consulted", and Section 4.1.3 further
says the TTL, "specifies the time interval (in seconds) that the
resource record may be cached before it should be discarded."</t>

<t>A natural English interpretation of these remarks would seem to be
clear enough that records past their TTL expiration must not be used,
However, <xref target="RFC1035"/> predates the more rigorous terminology of
<xref target="RFC2119"/> which softened the interpretation of "may" and "should".</t>

<t><xref target="RFC2181"/> aimed to provide "the precise definition of the Time to
Live" but in Section 8 was mostly concerned with the numeric range of
values and the possibility that very large values should be capped. (It
also has the curious suggestion that a value in the range 2147483648
to 4294967295 should be treated as zero.)  It closes that section by
noting, "The TTL specifies a maximum time to live, not a mandatory
time to live."  This is again not <xref target="RFC2119"/>-normative language, but
does convey the natural language connotation that data becomes
unusable past TTL expiry.</t>

<t>Several major recursive resolver operations currently use stale data
for answers in some way, including Akamai, OpenDNS, Xerocole, and
Nominum.  Their collective operational experience is that it provides
significant benefit with minimal downside.</t>

</section>
<section anchor="standards-action" title="Standards Action">

<t>The definition of TTL in <xref target="RFC1035"/> Sections 3.2.1 and 4.1.3 is
amended to read:</t>

<t><list style="hanging">
  <t hangText='TTL'>
  a 32 bit unsigned integer number of seconds in the range 0 -
2147483647 that specifies the time interval that the resource record
MAY be cached before the source of the information MUST again be
consulted.  Zero values are interpreted to mean that the RR can only
be used for the transaction in progress, and should not be cached.
Values with the high order bit set SHOULD be capped at no more than
2147483647.  If the authority for the data is unavailable when
attempting to refresh the data past the given interval, the record MAY
be used as though it has a remaining TTL of 1 second.</t>
</list></t>

</section>
<section anchor="edns-option" title="EDNS Option">

<t>While the basic behaviour of this answer-of-last-resort can be
achieved with changes only to resolvers, explicit signalling about the
use of stale data can be done with an EDNS <xref target="RFC6891"/> option.</t>

<t>[ This section will be fleshed out a bit more thoroughly if there is
interest in pursuing the option. ]</t>

<section anchor="option-format" title="Option Format">

<t>The option is structured as follows:</t>

<figure><artwork><![CDATA[
              +0 (MSB)                        +1 (LSB)
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
0: |                         OPTION-CODE                       |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
2: |                        OPTION-LENGTH                      |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
4: |                     STALE-RRSET-INDEX 1                   |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
6: |                                                           |
8: |                         TTL-EXPIRY 1                      |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
   :  ... additional STALE-RRSET-INDEX / TTL-EXPIRY pairs ...  :
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork></figure>

<t><list style="hanging">
  <t hangText='OPTION-CODE'>
  2 octets per <xref target="RFC6891"/>.  For Serve-Stale the code is TBD by IANA.</t>
  <t hangText='OPTION-LENGTH:'>
  2 octets per <xref target="RFC6891"/>.  Contains the length of the payload
following OPTION-LENGTH, in octets.</t>
  <t hangText='STALE-RRSET-INDEX'>
  Two octets as a signed integer, indicating the first RRSet in the
message which is beyond its TTL, with RRSet counting starting at 1 and
spanning message sections.</t>
  <t hangText='TTL-EXPIRY'>
  Four octets as an unsigned integer, representing the number of
seconds that have passed since the TTL for the RRset expired.</t>
</list></t>

</section>
<section anchor="option-usage" title="Option Usage">

<t>Software making a DNS request can signal that it understands
Serve-Stale by including the option with one STALE-RRSET-INDEX
initialized to any negative value and TTY-EXPIRY initialized to 0.
The index is set to a negative value to detect mere reflection of the
option by responders that don't really understand it.</t>

<t>If the request is made to a recursive resolver which used any stale
RRsets in its reply, it then fills in the corresponding indices and
staleness values.  If no records are stale, STALE-RRSET-INDEX and
TTL-EXPIRY are set to 0.</t>

<t>If the request is made to an authoritative nameserver, it can use the
option in the reply to indicate how the resolver should treat the
records in the reply if they are unable to be refreshed later.  A
default for all RRsets in the message is established by setting the
first STALE-RRSET-INDEX to 0, with optional additional
STALE-RRSET-INDEX values overriding the default.  A TTL-EXPIRY value
of 0 means to never serve the RRset as stale, while non-zero values
represent the maximum amount of time it can be used before it MUST be
evicted.  [ Does anyone really want to do this?  It adds more state
into resolvers. Is the idea only for purists, or is there a practical
application? ]</t>

<t>No facility is made for a client of a resolver to signal that it
doesn't want stale answers, because if a client has knowledge of
Serve-Stale as an option, it also has enough knowledge to just ignore
any records that come back stale.  [ There is admittedly the issue
that the client might just want to wait out the whole attempted
resolution, which there's currently no way to indicate.  The absolute
value of STALE-RRSET-INDEX could be taken as a timer the requester is
willing to wait for an answer, but that's kind of gross overloading it
like that Shame to burn another field on that though, but on the other
hand it would be nice if a client could always signal its impatience
level &#8211; "I must have an answer within 900 milliseconds!" ]</t>

</section>
</section>
<section anchor="example-method" title="Example Method">

<t>There is conceivably more than one way a recursive resolver could
responsibly implement this resiliency feature while still respecting
the intent of the TTL as a signal for when data is to be refreshed.</t>

<t>In this example method three notable timers drive considerations for
the use of stale data, as follows:</t>

<t><list style="symbols">
  <t>A client response timer, which is the maximum amount of time a
recursive resolver should allow between the receipt of a resolution
request and sending its response.</t>
  <t>A query resolution timer, which caps the total amount of time a
recursive resolver spends processing the query.</t>
  <t>A maximum stale timer, which caps the amount of time
that records will be kept past their expiration.</t>
</list></t>

<t>Recursive resolvers already have the second timer; the first and
third timers are new concepts for this mechanism.</t>

<t>When a request is received by the recursive resolver, it SHOULD start
the client response timer.  This timer is used to avoid client
timeouts.  It SHOULD be configurable, with a recommended value of 1.8
seconds.</t>

<t>The resolver then checks its cache for an unexpired answer. If it
finds none and the Recursion Desired flag is not set in the request,
it SHOULD immediately return the response without consulting the
cache for expired records.</t>

<t>If iterative lookups will be done, it SHOULD start the query
resolution timer.  This timer bounds the work done by the resolver,
and is commonly around 10 to 30 seconds.</t>

<t>If the answer has not been completely determined by the time the
client response timer has elapsed, the resolver SHOULD then check its
cache to see whether there is expired data that would satisfy the
request.  If so, it adds that data to the response message and SHOULD
set the TTL of each expired record in the message to 1 second.  The
response is then sent to the client while the resolver continues its
attempt to refresh the data.  1 second was chosen because historically
0 second TTLs have been problematic for some implementations.  It not
only sidesteps those potential problems with no practical negative
consequence, it would also rate limit further queries from any client
that is honoring the TTL, such as a forwarding resolver.</t>

<t>The maximum stale timer is used for cache management and is
independent of the query resolution process. This timer is
conceptually different from the maximum cache TTL that exists in many
resolvers, the latter being a clamp on the value of TTLs as received
from authoritative servers.  The maximum stale timer SHOULD be
configurable, and defines the length of time after a record expires
that it SHOULD be retained in the cache.  The suggested value is 7
days, which gives time to notice the resolution problem and for human
intervention to fix it.</t>

<t>This same basic technique MAY be used to handle stale data associated
with delegations.  If authoritative server addresses are not able to
be refreshed, resolution can possibly still be successful if the
authoritative servers themselves are still up.</t>

</section>
<section anchor="implementation-caveats" title="Implementation Caveats">

<t>Answers from authoritative servers that have a DNS Response Code of
either 0 (NOERROR) or 3 (NXDOMAIN) MUST be considered to have
refreshed the data at the resolver.  In particular, this means that
this method is not meant to protect against operator error at the
authoritative server that turns a name that is intended to be valid
into one that is non-existent, because there is no way for a resolver
to know intent.</t>

<t>Resolution is given a chance to succeed before stale data is used to
adhere to the original intent of the design of the DNS.  This
mechanism is only intended to add robustness to failures, and to be
enabled all the time.  If stale data were used immediately and then a
cache refresh attempted after the client response has been sent, the
resolver would frequently be sending data that it would have had no
trouble refreshing.</t>

<t>It is important to continue the resolution attempt after the stale
response has been sent, until the query resolution timeout, because
some pathological resolutions can take many seconds to succeed as they
cope with unavailable servers, bad networks, and other problems.
Stopping the resolution attempt when the response with expired data
has been sent would mean that answers in these pathological cases
would never be refreshed.</t>

<t>Canonical Name (CNAME) records mingled in the expired cache with other
records at the same owner name can cause surprising results.  This was
observed with an initial implementation in BIND when a hostname
changed from having an IPv4 Address (A) record to a CNAME.  The
version of BIND being used did not evict other types in the cache when
a CNAME was received, which in normal operations is not a significant
issue.  However, after both records expired and the authorities became
unavailable, the fallback to stale answers returned the older A
instead of the newer CNAME.</t>

<t>[ This probably applies to other occluding types, so more thought
should be given to the overall issue. ]</t>

<t>Keeping records around after their normal expiration will of course
cause caches to grow larger than if records were removed at their TTL.
Specific guidance on managing cache sizes is outside the scope of this
document.  Some areas for consideration include whether to track the
popularity of names in client requests versus evicting by maximum age,
and whether to provide a feature for manually flushing only stale
records.</t>

</section>
<section anchor="implementation-status" title="Implementation Status">

<t>[RFC Editor: per RFC 6982 this section should be removed prior to
publication.]</t>

<t>The algorithm described in the <xref target="example-method"/> section was
originally implemented as a patch to BIND 9.7.0.  It has been in
production on Akamai's production network since 2011, and effectively
smoothed over transient failures and longer outages that would have
resulted in major incidents. The patch was contributed to the Internet
Systems Consortium and is now distributed with BIND 9.12.</t>

<t>Unbound has a similar feature for serving stale answers, but it works
in a very different way by returning whatever cached answer it has
before trying to refresh expired records. This is unfortunately not
faithful to the ideal that data past expiry should attempt to be
refreshed before being served.</t>

</section>
<section anchor="security-considerations" title="Security Considerations">

<t>The most obvious security issue is the increased likelihood of DNSSEC
validation failures when using stale data because signatures could be
returned outside their validity period.  This would only be an issue
if the authoritative servers are unreachable, the only time the
techniques in this document are used, and thus does not introduce
a new failure in place of what would have otherwise been success.</t>

<t>Additionally, bad actors have been known to use DNS caches to keep
records alive even after their authorities have gone away.  This
potentially makes that easier, although without introducing a new
risk.</t>

</section>
<section anchor="privacy-considerations" title="Privacy Considerations">

<t>This document does not add any practical new privacy issues.</t>

</section>
<section anchor="nat-considerations" title="NAT Considerations">

<t>The method described here is not affected by the use of NAT devices.</t>

</section>
<section anchor="iana-considerations" title="IANA Considerations">

<t>This document contains no actions for IANA.  This section will be
removed during conversion into an RFC by the RFC editor.</t>

</section>
<section anchor="acknowledgements" title="Acknowledgements">

<t>The authors wish to thank Matti Klock, Mukund Sivaraman, Jean Roy, and
Jason Moreau for initial review.  Feedback from Robert Edmonds and
Davey Song has also been incorporated.</t>

</section>


  </middle>

  <back>

    <references title='Normative References'>

&RFC1035;
&RFC2181;
&RFC2119;
&RFC6891;


    </references>

    <references title='Informative References'>

&RFC7719;


    </references>



  </back>

<!-- ##markdown-source:
H4sIAHp/91kAA7VbbXPcxpH+Pr9iwnyIdNldk5RsSbyrS2iSthmLlI+kY+fi
VGoWmN1FiAUQvHC1dvzf73m6ZwAsuZJTV4mqJJG7wKCnX55+uqcxnU5Nm7W5
P7G3vn7IiqW9bV3u7blrnW1Le7mu6vIBv1/f2hvfZHnmi2Rr3Hxe+4cT+Zg3
er3NpGVSuDVWS2u3aKf8bJoWTVlNG141beSTw2OTuhZXHR8evZoeHRqTVfWJ
beuuaY8PD9/ge1d7d2Ivi9bXhW/NZinPeveN/a6s7ynml3XZVeZ+M1w0Pecz
TeLaE9u0qekqPqQ5sUeHL15O+O+nxiRlirtPbNdMXZNkmamyE2PtFHtN5P9m
u679otGfy7qVX4zr2lVZy5X4a21WYN3z2dnMvnWbGirx8rHu/dw9ZKk92/2q
rPHU03u3dpm988mqKPNymflGvmzwGA+xjz49tJ/XpUs3bitfJFm7PbFnbj2v
s3SpK2ELeMjVqT08Pnp5DPV9+jJ83hVtjcu/vT2VDzyelUOtUPnvnTx5lpRr
s7uJ72b2627t6my0ge9cDcHHn4v0X5blMve7An92eGhP19Uqa1fe4UP7javv
d6W/olwuK+wfM78Z7eDs1L55efjyxUeF34gov78XUWZ0BTOdTq2bQwKX4Le7
Vdaot9nUL7LCN9bZtYe5Ursoa1v7pKubDB5a+6bMH3zd0K+7xttGPf36lt4o
3u4eSliu7Fq3xDqbFZSgls9a13IN6kc8GaskrijK1s65sktWPjVYAe6C56ys
f19ltU8tV56pzLjY//Ui/Sv/h9z+fUsLZCkE+XsHf7dz7Ojet4199sOff/jL
c4uNuTTN2qwsXG7n+HIJpy9SkxXY2drxi4l1RbMJm8Kj/975os231jX3eDp+
a3hVM7FLX/gay6y7BgHQTIxvk5m1dyu/tZssz3Ufa8R6ih+xvrdVN8+zRB4j
V1LRZdKt8QTKNvdYCAGV525e1gg1aK7AluyXWftVN7euNT/816ptq+bkk0+W
cJBuTv/75KGl3j8ZAcIP/62S2HXZtLQYnmCoYzzZlgsL3+qfPLFlBbNkTYO9
TSx2YZtV2eWpdboJ9wDHcXM46srXPiysVmzsknIuupwaShJftdgkbhO9NW0T
LLXO0hT3m18TW+oy7RLqADarXTQHFqBUd9ka/5T2LZ3j2d3d2+eU1wku0t+6
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
9DXe8BYsFzL/B5AD4uohQAAA

-->

</rfc>

