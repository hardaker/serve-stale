<?xml version="1.0" encoding="US-ASCII"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xslt" ?>
<!-- generated by https://github.com/cabo/kramdown-rfc2629 version 1.0.40 -->
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY RFC1035 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.1035.xml">
<!ENTITY RFC2181 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2181.xml">
<!ENTITY RFC2119 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY RFC6891 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.6891.xml">
<!ENTITY RFC7719 SYSTEM "https://xml2rfc.tools.ietf.org/public/rfc/bibxml/reference.RFC.7719.xml">
]>
<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes"?>
<rfc category="std" docName="draft-ietf-dnsop-serve-stale-01"
     ipr="trust200902" updates="1034, 1035">
  <front>
    <title abbrev="DNS Serve Stale">Serving Stale Data to Improve DNS
    Resiliency</title>

    <author fullname="David C Lawrence" initials="D.C." surname="Lawrence">
      <organization>Akamai Technologies</organization>

      <address>
        <postal>
          <street>150 Broadway</street>

          <city>Cambridge</city>

          <code>MA 02142-1054</code>

          <country>USA</country>
        </postal>

        <email>tale@akamai.com</email>
      </address>
    </author>

    <author fullname="Warren Kumari" initials="W." surname="Kumari">
      <organization>Google</organization>

      <address>
        <postal>
          <street>1600 Amphitheatre Parkway</street>

          <city>Mountain View</city>

          <code>CA 94043</code>

          <country>USA</country>
        </postal>

        <email>warren@kumari.net</email>
      </address>
    </author>

    <author fullname="Puneet Sood" initials="P." surname="Sood">
      <organization>Google</organization>

      <address>
        <postal>
          <street/>

          <city/>

          <code/>

          <country/>
        </postal>

        <email>puneets@google.com</email>
      </address>
    </author>

    <date day="28" month="September" year="2018"/>

    <area>Internet</area>

    <workgroup>DNSOP Working Group</workgroup>

    <keyword>Internet-Draft</keyword>

    <abstract>
      <t>This draft defines a method for recursive resolvers to use stale DNS
      data to avoid outages when authoritative nameservers cannot be reached
      to refresh expired data.</t>
    </abstract>

    <note title="Ed note">
      <t>Text inside square brackets ([]) is additional background
      information, answers to frequently asked questions, general musings,
      etc. They will be removed before publication. This document is being
      collaborated on in GitHub at
      &lt;https://github.com/vttale/serve-stale&gt;. The most recent version
      of the document, open issues, etc should all be available here. The
      authors gratefully accept pull requests.</t>
    </note>
  </front>

  <middle>
    <section anchor="introduction" title="Introduction">
      <t>Traditionally the Time To Live (TTL) of a DNS resource record has
      been understood to represent the maximum number of seconds that a record
      can be used before it must be discarded, based on its description and
      usage in <xref target="RFC1035"/> and clarifications in <xref
      target="RFC2181"/>.</t>

      <t>This document proposes that the definition of the TTL be explicitly
      expanded to allow for expired data to be used in the exceptional
      circumstance that a recursive resolver is unable to refresh the
      information. It is predicated on the observation that authoritative
      server unavailability causes outages even when the underlying data those
      servers would return is typically unchanged.</t>

      <t>A method is described for this use of stale data, balancing the
      competing needs of resiliency and freshness. While this is intended to
      be immediately useful to the installed base of DNS software, an <xref
      target="RFC6891"/> EDNS option is also proposed in this document for
      enhanced signalling around the use of stale data by implementations that
      understand it.</t>

      <t>Note that it is highly desirable to couple this with a </t>
    </section>

    <section title="Notes to readers">
      <t>[ RFC Editor, please remove this section before publication! Readers:
      This is conversational text to describe what we've done, and will be
      removed, please don't bother sending editorial nits :-) ]</t>

      <t>Due to circumstances, the authors of this document got sidetracked,
      and we lost focus. We are now reviving it, and are trying to address /
      incorporate comments. There has also been more deployment and
      implementation recently, and so this document is now more describing
      what is known to work instead of simply proposing a concept. ]</t>

      <t>Open questions / notes:</t>

      <t><list style="symbols">
          <t>As we know that a number of implementations are doing something
          like serve-stale without any signalling, we are proposing removing
          the signalling, other than a "please do not do serve-stale EDNS"
          option for debugging.</t>

          <t>The TTL value to set in stale answers returned by recursive
          resolvers</t>

          <t/>
        </list></t>
    </section>

    <section anchor="terminology" title="Terminology">
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
      "OPTIONAL" in this document are to be interpreted as described in <xref
      target="RFC2119"/> when, and only when, they appear in all capitals, as
      shown here.</t>

      <t>For a comprehensive treatment of DNS terms, please see <xref
      target="RFC7719"/>.</t>
    </section>

    <section anchor="background" title="Background">
      <t>There are a number of reasons why an authoritative server may become
      unreachable, including Denial of Service (DoS) attacks, network issues,
      and so on. If the recursive server is unable to contact the
      authoritative servers for a name but still has relevant data that has
      aged past its TTL, that information can still be useful for generating
      an answer under the metaphorical assumption that, "stale bread is better
      than no bread."</t>

      <t><xref target="RFC1035"/> Section 3.2.1 says that the TTL "specifies
      the time interval that the resource record may be cached before the
      source of the information should again be consulted", and Section 4.1.3
      further says the TTL, "specifies the time interval (in seconds) that the
      resource record may be cached before it should be discarded."</t>

      <t>A natural English interpretation of these remarks would seem to be
      clear enough that records past their TTL expiration must not be used,
      However, <xref target="RFC1035"/> predates the more rigorous terminology
      of <xref target="RFC2119"/> which softened the interpretation of "may"
      and "should".</t>

      <t><xref target="RFC2181"/> aimed to provide "the precise definition of
      the Time to Live" but in Section 8 was mostly concerned with the numeric
      range of values and the possibility that very large values should be
      capped. (It also has the curious suggestion that a value in the range
      2147483648 to 4294967295 should be treated as zero.) It closes that
      section by noting, "The TTL specifies a maximum time to live, not a
      mandatory time to live." This is again not <xref
      target="RFC2119"/>-normative language, but does convey the natural
      language connotation that data becomes unusable past TTL expiry.</t>

      <t>Several major recursive resolver operations currently use stale data
      for answers in some way, including Akamai, OpenDNS, Xerocole, and
      Nominum. Their collective operational experience is that it provides
      significant benefit with minimal downside. As these implementations
      currently do this with no explicit signalling from the recursive to
      authoritative, nor from the client to the recursive, this document takes
      the position that explicit signalling is not required. [Editor: After
      discussions with implementors], and in light of the "DNS Camel"
      discussions, we are opting for implementation simplicity over more
      knobs, bells and whistles. ]</t>
    </section>

    <section anchor="standards-action" title="Standards Action">
      <t>The definition of TTL in <xref target="RFC1035"/> Sections 3.2.1 and
      4.1.3 is amended to read:</t>

      <t><list style="hanging">
          <t hangText="TTL:">a 32 bit unsigned integer number of seconds in
          the range 0 - 2147483647 that specifies the time interval that the
          resource record MAY be cached before the source of the information
          MUST again be consulted. Zero values are interpreted to mean that
          the RR can only be used for the transaction in progress, and should
          not be cached. Values with the high order bit set SHOULD be capped
          at no more than 2147483647. If the authority for the data is
          unavailable when attempting to refresh the data past the given
          interval, the record MAY be used as though it has a remaining TTL of
          1 second.</t>
        </list></t>
    </section>

    <section anchor="edns-option" title="EDNS Option">
      <t>The answer-of-last-resort can be achieved with changes only to
      resolvers, explicit signalling about the use of stale data can be done
      with an EDNS <xref target="RFC6891"/> option. This EDNS option can be
      included from a stub to a recursive, explicitly signalling that it does
      NOT want stale answers. It is expected that this (optional) extension
      could be useful for debugging. </t>

      <t>[ NOTE: This option adds complexity to implementations, and so we are
      making it optional for recursive servers to implement. ]</t>

      <section anchor="option-format" title="Option Format">
        <t>The option is structured as follows:</t>

        <figure>
          <artwork><![CDATA[
              +0 (MSB)                        +1 (LSB)
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
0: |                         OPTION-CODE                       |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
2: |                        OPTION-LENGTH                      |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
4: | D | U | S |             RESERVED                          |
   +---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+
]]></artwork>
        </figure>

        <t><list style="hanging">
            <t hangText="OPTION-CODE">2 octets per <xref target="RFC6891"/>.
            For Serve-Stale the code is TBD by IANA.</t>

            <t hangText="OPTION-LENGTH:">2 octets per <xref
            target="RFC6891"/>. Contains the length of the payload following
            OPTION-LENGTH, in octets.</t>

            <t hangText="D">Flag - if set, the client explicitly does NOT want
            stale answers. If clear, the client would like additional
            information.</t>

            <t hangText="U">Flag - this indicates that the server understand
            Serve-Stale EDNS option, and more information is communicated via
            the S flag [Ed note: this exists to get around the issue of some
            authorative servers simply echoing back the ENDS options ] </t>

            <t hangText="S">Flag - if set, this indicates that the answer
            provided is stale. If clear, it indicates that the answer is NOT
            stale. </t>

            <t hangText="RESERVED">Reserved for future use. Should be set to
            zero on send and ignored on receipt. </t>
          </list>[ Editor note: Dear WG - we are somewhat shaky on this
        section, and would like feedback on it... ] </t>
      </section>
    </section>

    <section anchor="example-method" title="Example Method">
      <t>There is conceivably more than one way a recursive resolver could
      responsibly implement this resiliency feature while still respecting the
      intent of the TTL as a signal for when data is to be refreshed.</t>

      <t>In this example method three notable timers drive considerations for
      the use of stale data, as follows:</t>

      <t><list style="symbols">
          <t>A client response timer, which is the maximum amount of time a
          recursive resolver should allow between the receipt of a resolution
          request and sending its response.</t>

          <t>A query resolution timer, which caps the total amount of time a
          recursive resolver spends processing the query.</t>

          <t>A maximum stale timer, which caps the amount of time that records
          will be kept past their expiration.</t>
        </list></t>

      <t>Recursive resolvers already have the second timer; the first and
      third timers are new concepts for this mechanism.</t>

      <t>When a request is received by the recursive resolver, it SHOULD start
      the client response timer. This timer is used to avoid client timeouts.
      It SHOULD be configurable, with a recommended value of 1.8 seconds.</t>

      <t>The resolver then checks its cache for an unexpired answer. If it
      finds none and the Recursion Desired flag is not set in the request, it
      SHOULD immediately return the response without consulting the cache for
      expired records.</t>

      <t>If iterative lookups will be done, it SHOULD start the query
      resolution timer. This timer bounds the work done by the resolver, and
      is commonly around 10 to 30 seconds.</t>

      <t>If the answer has not been completely determined by the time the
      client response timer has elapsed, the resolver SHOULD then check its
      cache to see whether there is expired data that would satisfy the
      request. If so, it adds that data to the response message and SHOULD set
      the TTL of each expired record in the message to 1 second. The response
      is then sent to the client while the resolver continues its attempt to
      refresh the data. 1 second was chosen because historically 0 second TTLs
      have been problematic for some implementations. It not only sidesteps
      those potential problems with no practical negative consequence, it
      would also rate limit further queries from any client that is honoring
      the TTL, such as a forwarding resolver.</t>

      <t>The maximum stale timer is used for cache management and is
      independent of the query resolution process. This timer is conceptually
      different from the maximum cache TTL that exists in many resolvers, the
      latter being a clamp on the value of TTLs as received from authoritative
      servers. The maximum stale timer SHOULD be configurable, and defines the
      length of time after a record expires that it SHOULD be retained in the
      cache. The suggested value is 7 days, which gives time to notice the
      resolution problem and for human intervention to fix it.</t>

      <t>This same basic technique MAY be used to handle stale data associated
      with delegations. If authoritative server addresses are not able to be
      refreshed, resolution can possibly still be successful if the
      authoritative servers themselves are still up.</t>
    </section>

    <section anchor="implementation-caveats" title="Implementation Caveats">
      <t>Answers from authoritative servers that have a DNS Response Code of
      either 0 (NOERROR) or 3 (NXDOMAIN) MUST be considered to have refreshed
      the data at the resolver. In particular, this means that this method is
      not meant to protect against operator error at the authoritative server
      that turns a name that is intended to be valid into one that is
      non-existent, because there is no way for a resolver to know intent.</t>

      <t>Resolution is given a chance to succeed before stale data is used to
      adhere to the original intent of the design of the DNS. This mechanism
      is only intended to add robustness to failures, and to be enabled all
      the time. If stale data were used immediately and then a cache refresh
      attempted after the client response has been sent, the resolver would
      frequently be sending data that it would have had no trouble
      refreshing.</t>

      <t>It is important to continue the resolution attempt after the stale
      response has been sent, until the query resolution timeout, because some
      pathological resolutions can take many seconds to succeed as they cope
      with unavailable servers, bad networks, and other problems. Stopping the
      resolution attempt when the response with expired data has been sent
      would mean that answers in these pathological cases would never be
      refreshed.</t>

      <t>Canonical Name (CNAME) records mingled in the expired cache with
      other records at the same owner name can cause surprising results. This
      was observed with an initial implementation in BIND when a hostname
      changed from having an IPv4 Address (A) record to a CNAME. The version
      of BIND being used did not evict other types in the cache when a CNAME
      was received, which in normal operations is not a significant issue.
      However, after both records expired and the authorities became
      unavailable, the fallback to stale answers returned the older A instead
      of the newer CNAME.</t>

      <t>[ This probably applies to other occluding types, so more thought
      should be given to the overall issue. ]</t>

      <t>Keeping records around after their normal expiration will of course
      cause caches to grow larger than if records were removed at their TTL.
      Specific guidance on managing cache sizes is outside the scope of this
      document. Some areas for consideration include whether to track the
      popularity of names in client requests versus evicting by maximum age,
      and whether to provide a feature for manually flushing only stale
      records.</t>
    </section>

    <section anchor="implementation-status" title="Implementation Status">
      <t>[RFC Editor: per RFC 6982 this section should be removed prior to
      publication.]</t>

      <t>The algorithm described in the <xref target="example-method"/>
      section was originally implemented as a patch to BIND 9.7.0. It has been
      in production on Akamai's production network since 2011, and effectively
      smoothed over transient failures and longer outages that would have
      resulted in major incidents. The patch was contributed to the Internet
      Systems Consortium and is now distributed with BIND 9.12.</t>

      <t>Unbound has a similar feature for serving stale answers, but it works
      in a very different way by returning whatever cached answer it has
      before trying to refresh expired records. </t>

      <t>Knot Resolver has an demo module here:
      https://knot-resolver.readthedocs.io/en/stable/modules.html#serve-stale</t>

      <t>BIND 9.12 support this functionality, and has some options that can
      be twiddled - these include: stale-answer-enable, stale-answer-ttl,
      max-stale-ttl, The BIND 9.12 announcement says:</t>

      <t>"Akamai contributed a patch, written by a former member of the BIND
      development team, that implements Serve Stale. Serve Stale returns a
      stale answer when a fresh answer is unavailable due to an unresponsive
      authority. Akamai has been using a version of BIND with this patch
      internally for several years with good results. A similar approach
      enabled some public resolvers to continue to offer access to popular
      sites like Twitter during the October 2016 massive DDoS against Dyn and
      we wanted BIND to have the same ability."</t>
    </section>

    <section title="new section">
      <t>"</t>
    </section>

    <section anchor="security-considerations" title="Security Considerations">
      <t>The most obvious security issue is the increased likelihood of DNSSEC
      validation failures when using stale data because signatures could be
      returned outside their validity period. This would only be an issue if
      the authoritative servers are unreachable, the only time the techniques
      in this document are used, and thus does not introduce a new failure in
      place of what would have otherwise been success.</t>

      <t>Additionally, bad actors have been known to use DNS caches to keep
      records alive even after their authorities have gone away. This
      potentially makes that easier, although without introducing a new
      risk.</t>
    </section>

    <section anchor="privacy-considerations" title="Privacy Considerations">
      <t>This document does not add any practical new privacy issues.</t>
    </section>

    <section anchor="nat-considerations" title="NAT Considerations">
      <t>The method described here is not affected by the use of NAT
      devices.</t>
    </section>

    <section anchor="iana-considerations" title="IANA Considerations">
      <t>This document contains no actions for IANA. This section will be
      removed during conversion into an RFC by the RFC editor.</t>
    </section>

    <section anchor="acknowledgements" title="Acknowledgements">
      <t>The authors wish to thank Matti Klock, Mukund Sivaraman, Jean Roy,
      and Jason Moreau for initial review. Feedback from Robert Edmonds and
      Davey Song has also been incorporated.</t>
    </section>
  </middle>

  <back>
    <references title="Normative References">
      &RFC1035;

      &RFC2181;

      &RFC2119;

      &RFC6891;
    </references>

    <references title="Informative References">
      &RFC7719;
    </references>
  </back>

  <!-- ##markdown-source:
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
YkJjqRf0+exo9swuuhoL1CYK7FXPjwhre2GfYN2Yjp/2kpt/SnIk5yjeOD1T
l6dwDMA8lr8ol0VAZuqj2Y3SZyP0DOQ6JQdE1VrD32QFQ9eXVbdcqVwqSqNO
hLtDLaaQ1KqrClWI/JXpdWK+qrZIUfXECiJH4zIbsopS5+FO6rCsELeNBHkE
TFpD7uphJmQrgXl4Yx4zwcNNHUBRB2KYA1XNwcykVUgyrIPyhRuwBCVPPuBC
WCMLzaMEg8ZCRiIZO5BIg72S0V+ilGiEYAL3YMKMNWMO6tsKFSDueESFrZlc
uR8YvGMxEVMLclATYm4XFUNVOwuWhKvjpYOBM6JpPrNPLlsjSYzBzlWAI4G6
a7rlUql5oi2yRuI4KgTKuxfPXz777PlLVhbPj189f/XZi+NXn44eJMiroP+j
r6vZU2ExWTFwsSbuf74zsDZgAT5+GyNz8HXXE89WlWgLKHEiDsLvSjhBVe/M
+NvZQSwKmKkl5nj1yA2mpYYmkBCsY9kB1iY0i8krPBI2uPfKolMApKv4HdYa
MS7N5QL0DZAevJXgK97d+/UO7nNDD2aV4/72aO3H4qGOPADf1VosDcWgUDGB
61hVMeLxUDjPbpxVtJCf2LeoRZDwJvZ7aB+lkNesfVUhMrq1Fh+IPRZJtAMk
6QWAlBAbPscWgXA8gfg2eXtjyHGEg5eM0hL+3qq/YvGwxv058jILSEmoNyQz
jkF/msqV92g4dSVU/j30biJ8090VHwH/SFiJnhP5T7Dk7WtjTuASz47tPJBG
UUghGq1fQr/v1y17Ln1op6Z36xfRQz+CuB9KDwYM6RfSg32YHoS8peRg+uQA
I/0vjJeCmCxkTKew97V35SDJ9bXkXvInk0oTpdwMR/iN04DDY2DJJQRPpEKj
NmKuSj4zf9TH9ji0CsBw7BBKpIIb39rIHntcAXdhNl7rlkGhB40OnCUxkV0v
nMSQMpdUIgsBNKBCnjSAVcFefaS3pBxil4EVTLLNJFEj5jyYo1eGQJ2koiB0
RmoyREvJB9ADYZuj6B7iucL6327UaVOV4VkxAI/nfuXugZm1mpRYI6E5rRbT
ApJN6Rl1a7UgNtBq8PcJ2LVUapTsyt5iC2jSl6GjSsK6OWo1yenvFxKx4M6r
0uva+F0EVy4UCxitXbCrH/6s2JjgN7VYFgV066XHBL3QwtGMzKnLFcQMYj96
YaM0yTeSyDaAsi5Wbuk59i/Q36+j7uwX4uoa90MR1bR1lwFf1TKLinV2g1CW
Ltv+n98e2idvbj5/+v438fsj++Q1vk+3/nY6nf6//8oihyf2Hx96mtXSZ3r2
9vziA1f8418nyfFHJImCvL64+vL2q3+7JM8/JMnN7enri+n19c3F7fQSpeL3
CKN/qySffcw6v/xHJXn5sUUAB9OL77+5vP7To3v5124Hf06snc1m47bq+0r9
ZCzVxgWwAN5jT/41kpiRWyOVHtsqa9n0BRXYwxI8kbW2nK5M9VBGGGSVC1u4
/fyczY3L06vTWb+meujJLyx7Vkk/XvNt4csl0Czmy43bFZXLjcIE0WZvZVKg
uDDJ1kPV4bm32yo9WZB/nx7wfmmuJRxbQLstUuqNbyNRMGB40pXUGkL6zLtK
2jSxFBb01Vvk1IBrAahr+QGpUUiMaTaulIyT1otITMEH+0LiLyS3DCKX75Ga
ydCjTXL3NMfstWeRqoSVNtKh0qakUu2UhK+vmdFji3M2Ru9vKSWUGntjoLBy
zpV6ydKg1qpfElZPF4dOVmPGzsLOV89Xh5yh6mMWe998whRdEX6MLdlyZ0u/
VAav9Ql5zO3tn1J0PLjhcCa5Bzb27yT1YKtc5+Eq+CwHucqQ/JjowDiKmCbV
DU0UFVuA2jeV7DAWAlX5G5a3sRe638Tr2zWqLEiwdrlXER6pBdTDlLNgq5Ls
jRhIWCsdDoYvSPyFFZRw16LoGS2IT5SOGhbH1nrRyErsmkZSqaysrPqynPaV
iyaP4A9XGCGQXKuKPPz4Hj98WCU7oO+Q14wUnLg5d8klYnSChVbbnnaLriJ5
lXozdj10K3tLKHfZicxDg0xOloRUQtMFlq+hkFOD0sSBgWt3DOxo0Lw2qjRs
sUHsE0sFuR0ugatSHBrFj/d1SGVFpKjiYcEI9N9HrsT+K+y1Dn3IRBEp7jgp
yMUGvnootYGcvZVe1CRn4UOgs3uqdt4Kry2rcvrjUG2Yxw9/3Jq4JsEg1VBi
tw+Pe6SiAen19yHTSga087wSL9wxxGOcbFlBMugqYdC/kyYB1NEo+YSErbTk
RgR5Zi81P6C8dMqfaSeQ0NC0oM9VrSWrNG5R6LDoyaBZFCjpzPB39gfQ06vK
LlymfZPkrNoPzXjO0Op5We9nkGEf36RZwJiXTSghj8X5hB0BOWIJi2E9Vhx3
ZbUtfK6NnDEoKsCrS0hQ9N2Z2D0b7oQkf2OPDNJASYYIkXxeRGMvQg5lVShV
/m1k7tDuOqCsyuM5oTSXTV9DRlHXqPVafUoy0dZBqFiFwGcqyqzlmc+l01h0
KruClxjgN+NeRsk19oI5HYHO5WavjS1piL8XBVnfV3J3PPtmBqcL1mPMkf63
YUETK0aRWZsm0TTS5hE1QTaksZyPW9ZVoxFGiiGY2Zoi3MWTu5uV097SnGde
DmUy9gbE9UU8iBPd0Ui6ejqckybuSnNAbI1iAyU7/WO3yOIZ8Zbt3uhiRPiw
3sBbZUyjQAgXdjq1B5faHpV0PnTRCSdAp1eHCHvuPqb+Xx1IGWYv3jmeNNk3
ciaXTjVCo93GcA8M2w1Fu6RgWurR1CTSGk0vTeCN/SmWFsGjc7qFZ/vMR4TR
MwHeyZRaLk1qvkZAiXykJ2dOjw3kXDJ1CB5gNrNOPHvycY/x3LFd1Z6g1irU
01M4jMGtsL8C7EjNNjzDPHpCN9mvSv8DSBstFncf150MhPAjUOnMI8oc5gOQ
1ea+3XqfkhbsshlDkASXSclVujY+5ndhAyrRTOXERfVudN++oJnbxI4W1FP8
c4JuPKnkpq7AJJqUhOQx8ZFp26q/x5+3/ySzdx6Q2hB3MvowHA4MBwN40PUj
IzOuYAdwpyEhfTZxfhXhP0dcnuwFrlLnyR3IBUq/1SjYtM1wPr327M+EZj1j
24d4M6Y1Ypx7Tfn7h3BJKgHw2ByTAsCMsHXfe9L8ioKZno3nw8SP3iPdbWBv
o7MAo7ZbVS7Csqv1bFG7P6LSdWyQ9pB6NHuZKoKZNmKGzMYdZiuf3TXiTNIA
TLDZlWnqQbFmRsIIeFwEOkRJrEgHEdE6cLdzYABvWRRuyT2xs9j0hVTS5cQM
Whof1MfhgsjyVFfcGpNPbI72cwK9qEnK6E/KR0MrYc42f1XddZvBzdgte89K
g1Obh7Gzb6Y5T4fVp3lCq7233huiDxhBfoLsei00JY4DHB3SvM8O7WCO1BlV
NGfS114s7VIR1kQvrEx4sDV4nh56UA+PuZayhwLRx3GbPdIcdz1YnoaP2iTR
8dKAlTyXWn4Ppl8Yu/G4DxpuFrvIvcWyWlY0lRKZPBGTNDezZ9lEp+UcVMQy
UlTEdADX5eH5A/s+5OJYtG/cCqkw/foKyzweVR4zisRt39EdpTeW0iTcVEgk
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
gh9u9DXe+BYsFzL/B5uCtiQhQAAA

-->
</rfc>
